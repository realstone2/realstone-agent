# TanStack Mutation Hook Template
# <!-- Powered by BMADâ„¢ Core -->

template:
  id: tanstack-mutation-template-v1
  name: TanStack Mutation Hook
  version: 1.0
  output:
    format: typescript
    filename: "{{output_directory}}/use-{{method_lower}}-{{entity_name}}-mutation.ts"

sections:
  - id: mutation_hook
    content: |
      import { useMutation, useQueryClient } from '@tanstack/react-query';
      import { {{api_import}} } from '@src/domains/app/swagger/acloset-api';
      import { {{entity_camel}}Queries } from './{{entity_name}}-queries';
      {{#if has_request_type}}
      import type { {{request_type}} } from '@src/domains/app/swagger/generated/data-contracts';
      {{/if}}

      export const use{{method_pascal}}{{entity_pascal}}Mutation = () => {
        const queryClient = useQueryClient();
        return useMutation({
          mutationFn: ({{mutation_params}}) => {{api_call}},
          onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: {{entity_camel}}Queries.all() });
          },
          onError: (error) => {
            console.error('{{method_pascal}} {{entity_pascal}} failed:', error);
          },
        });
      };

# Method-specific template variations
method_templates:
  POST:
    mutation_name: "create"
    success_message: "{{entity_pascal}} created successfully"
    invalidation_strategy: "lists"

  PUT:
    mutation_name: "update"
    success_message: "{{entity_pascal}} updated successfully"
    invalidation_strategy: "all"

  PATCH:
    mutation_name: "update"
    success_message: "{{entity_pascal}} updated successfully"
    invalidation_strategy: "all"

  DELETE:
    mutation_name: "delete"
    success_message: "{{entity_pascal}} deleted successfully"
    invalidation_strategy: "all"

# Example output:
example_output: |
  import { useMutation, useQueryClient } from '@tanstack/react-query';
  import { myIdeasApi } from '@src/domains/app/swagger/acloset-api';
  import { myIdeasQueries } from './my-ideas-queries';
  import type { PostMyIdeasRequest } from '@src/domains/app/swagger/generated/data-contracts';

  export const usePostMyIdeasMutation = () => {
    const queryClient = useQueryClient();
    return useMutation({
      mutationFn: (data: PostMyIdeasRequest) => myIdeasApi.myIdeasCreate(data),
      onSuccess: () => {
        queryClient.invalidateQueries({ queryKey: myIdeasQueries.all() });
      },
      onError: (error) => {
        console.error('Post MyIdeas failed:', error);
      },
    });
  };
