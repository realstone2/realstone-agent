# TanStack Query Options Template
# <!-- Powered by BMADâ„¢ Core -->

template:
  id: tanstack-query-template-v1
  name: TanStack Query Options
  version: 1.0
  output:
    format: typescript
    filename: "{{output_directory}}/{{entity_name}}-queries.ts"

sections:
  - id: imports
    content: |
      import { queryOptions, infiniteQueryOptions } from '@tanstack/react-query';
      import { {{api_import}} } from '@src/domains/app/swagger/acloset-api';
      {{#if has_types}}
      import type { {{type_imports}} } from '@src/domains/app/swagger/generated/data-contracts';
      {{/if}}
      {{#if is_infinite}}
      import { getNextPageParam2 } from '@libs/react-query/utils';
      {{/if}}
      {{#if has_mock}}
      import { {{mock_import}} } from '{{mock_path}}';
      {{/if}}

  - id: query_keys
    content: |
      const {{entity_camel}}Queries = {
        all: () => ['{{entity_name}}'],
        {{#if has_list}}
        lists: () => [...{{entity_camel}}Queries.all(), 'list'],
        {{/if}}
        {{#if has_detail}}
        details: () => [...{{entity_camel}}Queries.all(), 'detail'],
        {{/if}}
        {{#each query_methods}}
        {{method_name}}: {{method_params}} =>
          {{#if is_infinite}}infiniteQueryOptions{{else}}queryOptions{{/if}}({
            queryKey: [...{{parent_key}}, {{key_params}}],
            {{#if has_mock}}
            // Real API call (commented out)
            // queryFn: {{query_fn_real}},
            
            // Type-safe mock data usage (development)
            queryFn: async ({ pageParam }) => {
              // TODO: Remove mock data and connect real API
              // Using type-safe mock data: {{response_type_name}}
              return Promise.resolve({{mock_data_ref}});
            },
            {{else}}
            queryFn: {{query_fn}},
            {{/if}}
            {{#if is_infinite}}
            initialPageParam: '{{initial_page}}',
            getNextPageParam: lastPage => getNextPageParam2(lastPage.pagination),
            {{/if}}
            {{#if stale_time}}
            staleTime: {{stale_time}},
            {{/if}}
          }),
        {{/each}}
      };

      export { {{entity_camel}}Queries };

# Example output (with Type-Safe Mock data):
example_output: |
  import { infiniteQueryOptions } from '@tanstack/react-query';
  import { myIdeasApi } from '@src/domains/app/swagger/acloset-api';
  import type { MyIdeasListParams, DomainMyIdeasListResponse } from '@src/domains/app/swagger/generated/data-contracts';
  import { getNextPageParam2 } from '@libs/react-query/utils';
  import { mockMyIdeasList } from './my-ideas-mock';

  const myIdeasQueries = {
    all: () => ['my-ideas'],
    lists: () => [...myIdeasQueries.all(), 'list'],
    list: (query: MyIdeasListParams) =>
      infiniteQueryOptions({
        queryKey: [...myIdeasQueries.lists(), 'list', query],
        // Real API call (commented out)
        // queryFn: async ({ pageParam }) => {
        //   return myIdeasApi.myIdeasList({
        //     ...query,
        //     cursor: pageParam,
        //   });
        // },
        
        // Type-safe mock data usage (development)
        queryFn: async ({ pageParam }) => {
          // TODO: Remove mock data and connect real API
          // Using type-safe mock data: DomainMyIdeasListResponse
          return Promise.resolve(mockMyIdeasList);
        },
        initialPageParam: "",
        getNextPageParam: lastPage => getNextPageParam2(lastPage.pagination),
        staleTime: 300000, // 5 minutes
      }),
  };

  export { myIdeasQueries };
